
import Foundation
import UIKit

{%- for import in argument.autoMockableImports %}
import {{ import }}
{% endfor -%}

{%- for import in argument.autoMockableTestableImports %}
@testable import {{ import }}
{% endfor -%}

{%- macro cleanString string %}{{ string | replace:"(","_" | replace:")","" | replace:":","_" | replace:"`","" | replace:" ","_" | replace:"?","_" | replace:"!","_" | replace:",","_" | replace:"->","_" | replace:"@","_" | replace:".","_" | replace:"[","" | replace:"]","" | replace:"<","" | replace:">","" | replace:"&","" | snakeToCamelCase }}{% endmacro -%}
{%- macro swiftifyMethodName method type -%}
    {%- set cantUseCallName %}{% call multipleMethodsWithSameCallNameExist type method %}{% endset -%}
    {%- set cantUseSelectorName %}{% call multipleMethodsWithSameSelectorNameExist type method %}{% endset -%}
    {%- set cleanMethodName %}
    {%- if cantUseSelectorName -%}
    {% call cleanString method.name %}
    {%- elif cantUseCallName -%}
    {% call cleanString method.selectorName %}
    {%- else -%}
    {% call cleanString method.callName %}
    {%- endif -%}
    {% endset -%}
    {{ cleanMethodName | lowerFirstLetter }}
{%- endmacro -%}

{%- macro multipleMethodsWithSameCallNameExist type method -%}
    {%- for m in type.allMethods|!definedInExtension|!static where m.callName == method.callName and m.name != method.name %}
        {{ true }}
        {% break %}
    {% endfor -%}
{%- endmacro -%}

{%- macro multipleMethodsWithSameSelectorNameExist type method -%}
    {%- for m in type.allMethods|!definedInExtension|!static where m.selectorName == method.selectorName and m.name != method.name %}
        {{ true }}
        {% break %}
    {% endfor -%}
{%- endmacro -%}

{%- macro accessLevel level %}{% if level != 'internal' %}{{ level }} {% endif %}{% endmacro -%}

{%- macro staticSpecifier method %}{% if method.isStatic and not method.isInitializer %}static {% endif %}{% endmacro -%}

{%- macro staticVarSpecifier variable %}{% if variable.isStatic %}static {% endif %}{% endmacro -%}

{%- macro methodClosureCallParameters method %}{% for param in method.parameters %}{{ '&' if param.typeName.name | hasPrefix:"inout " }}{% if not param.name == "" %}{{ param.name }}{% else %}arg{{ param.index }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro -%}

{%- macro mockMethod method type %}

{% if method.isInitializer %}
    required {{ method.name }} {

    }
{% else %}
    {% for name, attribute in method.attributes %}
    {% for value in attribute %}
    {{ value }}
    {% endfor %}
    {% endfor %}
    {% call staticSpecifier method %}{% call methodName method %}{{ ' async' if method.isAsync }}{{ ' throws' if method.throws }}{% if not method.returnTypeName.isVoid %} -> {% call existentialVariableTypeName method.returnTypeName false %}{% endif %} {
        {% if not method.isStatic -%}
        {%- if method.throws %}try throwingRecord{% else %}record{% endif %}(.{% call swiftifyMethodName method type %}{% if method.parameters.count != 0%}, parameters: [{% for param in method.parameters %}{{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %}]{% endif %})
        {%- endif %}
    }
{% endif %}
{% endmacro -%}

{%- macro mockSubscript subscript index %}
    // MARK: - Subscript #{{ index }}
    subscript{% if subscript.isGeneric %}<{% for genericParameter in subscript.genericParameters %}{{ genericParameter.name }}{% if genericParameter.inheritedTypeName %}: {{ genericParameter.inheritedTypeName.name }}{% endif %}{{ ', ' if not forloop.last }}{% endfor %}>{% endif %}({% for parameter in subscript.parameters %}{{ parameter.asSource }}{{ ', ' if not forloop.last }}{% endfor %}) -> {{ subscript.returnTypeName.name }}{% if subscript.genericRequirements|count != 0 %} where {% for requirement in subscript.genericRequirements %}{{ requirement.leftType.name }} {{ requirement.relationshipSyntax }} {{ requirement.rightType.typeName.name }}{{ ', ' if not forloop.last }}{% endfor %}{% endif %} {
        {% if subscript.readAccess %}get{% if subscript.isAsync %} async{% endif %}{% if subscript.throws %} throws{% endif %} { fatalError("Subscripts are not fully supported yet") }{% endif %}
        {% if subscript.writeAccess %}set { fatalError("Subscripts are not fully supported yet") }{% endif %}
    }
{% endmacro -%}

{%- macro mockOptionalVariable variable defaultValue %}
    {% call staticVarSpecifier variable %}var {% call mockedVariableName variable %}: {% call existentialVariableTypeName variable.typeName false %}{% if not defaultValue == "" %} = {{ defaultValue }}{% endif %}
{% endmacro -%}

{%- macro mockNonOptionalArrayOrDictionaryVariable variable defaultValue %}
    {% call staticVarSpecifier variable %}var {% call mockedVariableName variable %}: {% call existentialVariableTypeName variable.typeName false %} = {% if not defaultValue == "" %}{{ defaultValue }}{% elif variable.isArray %}[]{% elif variable.isDictionary %}[:]{% endif %}
{% endmacro -%}

{%- macro mockNonOptionalVariable variable defaultValue %}
    {% call staticVarSpecifier variable %}var {% call mockedVariableName variable %}: {% call existentialVariableTypeName variable.typeName false %} = {% if not defaultValue == "" %}{{ defaultValue }}{% else %}<#Default value missing: Add a Sourcery annotation like `// sourcery: {{ variable.name }} = <default value>` below the existing `mockable` annotation.#>{% endif %}
{% endmacro -%}

{%- macro variableThrowableErrorUsage variable %}
            if let error = {% call mockedVariableName variable %}ThrowableError {
                throw error
            }
{% endmacro -%}

{%- macro variableClosureName variable %}{% call mockedVariableName variable %}Handler{% endmacro -%}

{%- macro mockAsyncOrThrowingVariable variable %}
    var {% call mockedVariableName variable %}: {% call existentialVariableTypeName variable.typeName false %} {
        get {% if variable.isAsync %}async {% endif %}{% if variable.throws %}throws {% endif %}{
            {% if variable.throws %}try throwingRecord{% else %}record{% endif %}(.{{ variable.name }})
        }
    }
{% endmacro -%}

{%- macro mockedVariableName variable %}{{ variable.name }}{% endmacro -%}
{# Swift does not support closures with implicitly unwrapped optional return value type. That is why existentialVariableTypeName.isNotAllowedToBeImplicitlyUnwrappedOptional should be true in such case #}
{%- macro existentialVariableTypeName typeName isNotAllowedToBeImplicitlyUnwrappedOptional -%}
    {%- if typeName|contains:"<" and typeName|contains:">" -%}
        {{ typeName }}
    {%- elif typeName|contains:"any " and typeName|contains:"!"  -%}
        {{ typeName | replace:"any","(any" | replace:"!",")!" }}
    {%- elif typeName|contains:"any " and typeName.isOptional  -%}
        {{ typeName | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName|contains:"?" -%}
        ({{ typeName | replace:"any","(any" | replace:"?",")?" }})
    {%- elif typeName|contains:"some " and typeName|contains:"!"  -%}
        {{ typeName | replace:"some","(some" | replace:"!",")!" }}
    {%- elif typeName|contains:"some " and typeName.isOptional  -%}
        {{ typeName | replace:"some","(some" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName.isClosure and typeName|contains:"?" -%}
        ({{ typeName | replace:"some","(some" | replace:"?",")?" }})
    {%- elif typeName.isClosure -%}
        ({{ typeName }})
    {%- elif isNotAllowedToBeImplicitlyUnwrappedOptional -%}
        {{ typeName | replace:"!","" }}
    {%- else -%}
        {{ typeName }}
    {%- endif -%}
{%- endmacro -%}
{# Swift does not support closures with variadic parameters of existential types as arguments. That is why existentialClosureVariableTypeName.isVariadic should be false when typeName is a closure #}
{%- macro existentialClosureVariableTypeName typeName isVariadic keepInout -%}
    {% set name %}
        {%- if keepInout -%}
            {{ typeName }}
        {%- else -%}
            {{ typeName | replace:"inout ","" }}
        {%- endif -%}
    {% endset %}
    {%- if typeName|contains:"any " and typeName|contains:"!" -%}
        {{ name | replace:"any","(any" | replace:"!",")?" }}
    {%- elif typeName|contains:"any " and typeName.isOptional and typeName.isClosure -%}
        ({{ typeName.unwrappedTypeName| replace:"inout ","" | replace:"any","(any" | replace:"?",")?" }})?
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName|contains:"?" and typeName.closure.parameters.count > 1 -%}
        {{ name | replace:"any","(any" | replace:"?",")?" | replace:") ->",")) ->" }}
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName|contains:"?" and typeName.closure.parameters.count > 1 -%}
        {{ name | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"any " and typeName|contains:"?" -%}
        {{ name | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName|contains:"!" -%}
        {{ name | replace:"some","(any" | replace:"!",")?" }}
    {%- elif typeName|contains:"some " and typeName.isClosure and typeName|contains:"?" -%}
        {{ name | replace:"some","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName|contains:"?" -%}
        {{ name | replace:"some","(any" | replace:"?",")?" }}
    {%- elif isVariadic and typeName|contains:"any " -%}
        [({{ name }})]
    {%- elif isVariadic -%}
        {{ name }}...
    {%- else -%}
        {{ name|replace:"some ","any " }}
    {%- endif -%}
{%- endmacro -%}
{# Swift does not support tuples with variadic parameters. That is why existentialClosureVariableTypeName.isVariadic should be false when typeName is a closure #}
{%- macro existentialClosureTupleVariableTypeName typeName isVariadic keepInout -%}
    {% set name %}
        {%- if keepInout -%}
            {{ typeName }}
        {%- else -%}
            {{ typeName | replace:"inout ","" }}
        {%- endif -%}
    {% endset %}
    {%- if typeName|contains:"any " and typeName|contains:"!" -%}
        {{ name | replace:"any","(any" | replace:"!",")?" }}
    {%- elif typeName|contains:"any " and typeName.isOptional and typeName.isClosure -%}
        ({{ typeName.unwrappedTypeName| replace:"inout ","" | replace:"any","(any" | replace:"?",")?" }})?
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName|contains:"?" -%}
        {{ name | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"any " and typeName|contains:"?" -%}
        {{ name | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName|contains:"!" -%}
        {{ name | replace:"some","(any" | replace:"!",")?" }}
    {%- elif typeName|contains:"some " and typeName.isClosure and typeName|contains:"?" -%}
        {{ name | replace:"some","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName|contains:"?" -%}
        {{ name | replace:"some","(any" | replace:"?",")?" }}
    {%- elif isVariadic -%}
        [{{ name }}]
    {%- else -%}
        {{ name|replace:"some ","any " }}
    {%- endif -%}
{%- endmacro -%}
{%- macro existentialParameterTypeName typeName isVariadic -%}
    {%- if typeName|contains:"any " and typeName|contains:"?," and typeName|contains:">?" -%}
        {{ typeName | replace:"any","(any" | replace:"?,",")?," }}
    {%- elif typeName|contains:"any " and typeName|contains:"!" -%}
        {{ typeName | replace:"any","(any" | replace:"!",")!" }}
    {%- elif typeName|contains:"any " and typeName.isOptional and typeName.isClosure -%}
        ({{ typeName.unwrappedTypeName | replace:"any","(any" | replace:"?",")?" }})?
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName.closure.parameters.count > 1 and typeName.closure.returnTypeName.name|contains:"any " and typeName|contains:"?" -%}
        {{ typeName | replace:"any","(any" | replace:"?",")?" | replace:") ->",")) ->" }})
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName.closure.returnTypeName.name|contains:"any " and typeName|contains:"?" -%}
        {{ typeName | replace:"any","(any" | replace:"?",")?" }})
    {%- elif typeName|contains:"any " and typeName.isClosure and typeName|contains:"?" -%}
        {{ typeName | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"any " and typeName.isOptional -%}
        {{ typeName | replace:"any","(any" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName|contains:"!" -%}
        {{ typeName | replace:"some","(some" | replace:"!",")!" }}
    {%- elif typeName|contains:"some " and typeName.isClosure and typeName|contains:"?" -%}
        {{ typeName | replace:"some","(some" | replace:"?",")?" }}
    {%- elif typeName|contains:"some " and typeName.isOptional -%}
        {{ typeName | replace:"some","(some" | replace:"?",")?" }}
    {%- elif isVariadic -%}
        {{ typeName }}...
    {%- elif typeName.isClosure and typeName.closure.parameters.count > 0 and typeName.closure.parameters.last.isVariadic -%}
        {{ typeName }})
    {%- else -%}
        {{ typeName }}
    {%- endif -%}
{%- endmacro -%}
{%- macro methodName method %}func {{ method.shortName}}({%- for param in method.parameters %}{% if param.argumentLabel == nil %}_ {% if not param.name == "" %}{{ param.name }}{% else %}arg{{ param.index }}{% endif %}{%elif param.argumentLabel == param.name%}{{ param.name }}{%else%}{{ param.argumentLabel }} {{ param.name }}{% endif %}: {% if param.typeName.isClosure and param.typeName.closure.parameters.count > 1 %}({% endif %}{% call existentialParameterTypeName param.typeName param.isVariadic %}{% if param.typeName.isClosure and param.typeName.closure.parameters.count > 1 %}){% endif %}{% if not forloop.last %}, {% endif %}{% endfor -%}){% endmacro -%}

{%- macro extractProtocolCompositionFromAssociatedTypes type -%}
    {%- if type.associatedTypes|sortedValuesByKeys|count > 0 -%}
    <
    {%- for associatedType in type.associatedTypes|sortedValuesByKeys -%}
    {% if associatedType.type.kind != nil and associatedType.type.kind|contains:"protocol" %}
    {{ associatedType.name }}: {{ associatedType.typeName }},
    {%- endif -%}
    {%- endfor -%}
    >
    {%- endif -%}
{%- endmacro -%}

{%- macro extractProtocolRequirementsFromAssociatedTypes associatedTypes -%}
    {%- for associatedType in associatedTypes -%}
        {%- if associatedType.type.kind != nil and associatedType.type.kind|contains:"protocol" -%}
            {%- for requirement in associatedType.type.genericRequirements -%}
                {%- set requirementString -%}
                    {{ requirement.leftType.name }} {{ requirement.relationshipSyntax }} {{ requirement.rightType.typeName.name }}
                {%- endset -%}
                {{ requirementString }},
            {%- endfor -%}
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}


{%- macro extractProtocolRequirementsFromType type -%}
    {%- set requirements -%}
    {% call extractProtocolRequirementsFromAssociatedTypes type.associatedTypes|sortedValuesByKeys %}
    {%- endset -%}
    {% if requirements|isEmpty == false %}
    where {{ requirements }}{
    {%- else -%}
    {
    {% endif %}
{%- endmacro -%}

{% for type in types.protocols where type.based.AutoMockable or type|annotated:"mockable" %}{% if type.name != "AutoMockable" %}

class {{ type.name }}Mock{% set generics %}{% call extractProtocolCompositionFromAssociatedTypes type %}{% endset %}{{ generics | replace:",>",">"}}: {% if type.allMethods|!definedInExtension|!static|count != 0 %}Mock<{{ type.name }}Mock.Method>, {% else %}NSObject, {% endif%}{{ type.name }} {%- set requirements -%}{% call extractProtocolRequirementsFromType type %}{%- endset -%} {{ requirements|replace:",{","{"|replace:"{"," {" }}
{%- for associatedType in type.associatedTypes|sortedValuesByKeys %}
    {% if associatedType.type.kind == nil or not associatedType.type.kind|contains:"protocol" %}
    typealias {{ associatedType.name }} = {% if associatedType.type != nil %}{{ associatedType.type.name }}{% elif associatedType.typeName != nil %}{{ associatedType.typeName.name }}{% else %}Any{% endif %}
    {% endif %}
{% endfor %}

{% if type.allMethods|!definedInExtension|!static|count != 0 %}
    enum Method {
{% for variable in type.allVariables %}
{% if variable.isAsync %}
        case {{ variable.name }}
{% endif %}
{% endfor %}
{% for variable in type.allVariables %}
{% if variable.throws %}
        case {{ variable.name }}
{% endif %}
{% endfor %}
{% for method in type.allMethods|!definedInExtension|!static %}
        case {% call swiftifyMethodName method type %}
{% endfor %}
    }
{% endif %}

{%- set hasDefaultReturnValueOverride %}
{%- for key in type.annotations where key | hasSuffix:"ReturnValue" %}
{{ true }}
{% endfor -%}
{% endset %}
{%- if hasDefaultReturnValueOverride %}

    override var defaultReturnValues: [Method : Any?] {
        [{% for key in type.annotations where key | hasSuffix:"ReturnValue" %}
            .{{ key|replace:"ReturnValue",""|replace:"'",""" }}: {{ type.annotations[key] }},
        {% endfor %}]
    }
{% endif %}

{%- for variable in type.allVariables|!definedInExtension %}
    {% set annotationKey %}{{ variable.name }}{% endset %}
    {% set defaultValueRaw %}{{ type.annotations[annotationKey]|default:"" }}{% endset %}
    {% set defaultValue %}{{ defaultValueRaw|replace:"'",""" }}{% endset %}
    {% if variable.isAsync or variable.throws %}{% call mockAsyncOrThrowingVariable variable %}{% elif variable.isOptional %}{% call mockOptionalVariable variable defaultValue %}{% elif variable.isArray or variable.isDictionary %}{% call mockNonOptionalArrayOrDictionaryVariable variable defaultValue %}{% else %}{% call mockNonOptionalVariable variable defaultValue %}{% endif %}
{% endfor -%}

{%- for method in type.allMethods|!definedInExtension %}
    {% call mockMethod method type %}
{% endfor -%}

{%- for subscript in type.allSubscripts|!definedInExtension %}
    {% call mockSubscript subscript forloop.counter %}
{% endfor %}
}
{% endif %}
{% endfor %}
